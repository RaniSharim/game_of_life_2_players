{"version":3,"file":"bundle.js","sources":["../../src/board.ts","../../src/replay.ts","../../src/game.ts","../../src/ui.ts","../../src/index.ts"],"sourcesContent":["export enum Cell {\r\n    Dead,\r\n    AlivePlayer0,\r\n    AlivePlayer1\r\n}\r\n\r\nclass GetNeighborhoodResult {\r\n    constructor (public alive_player_1_count: number = 0, public alive_player_2_count: number = 0) {}\r\n    get total():number {return this.alive_player_1_count + this.alive_player_2_count }\r\n}\r\n\r\nexport class Board {\r\n    play_area:Cell[];\r\n    \r\n    constructor(public board_size: number = 10) {\r\n        this.reset_play_area();       \r\n    }    \r\n\r\n    reset_play_area() {\r\n        this.play_area = new Array<Cell>(this.board_size * this.board_size);\r\n        this.play_area.fill(Cell.Dead);       \r\n    }\r\n\r\n    get_cell_xy(row: number, col: number) {\r\n        return this.play_area[row * this.board_size + col]\r\n    }\r\n\r\n    set_cell(cell_number: number, new_state: Cell, allow_override: boolean = false) {\r\n\r\n        if (new_state == Cell.Dead && this.play_area[cell_number] == Cell.Dead) {\r\n            throw new Error(`Cannot kill a dead cell ${cell_number} = ${Math.floor(cell_number/this.board_size)} : ${cell_number%this.board_size}`);\r\n        }\r\n        else if ((new_state == Cell.AlivePlayer0 || new_state == Cell.AlivePlayer1)  && this.play_area[cell_number] != Cell.Dead && !allow_override) {\r\n            throw new Error(`Cannot spawn on occupied cell ${Math.floor(cell_number/this.board_size)} : ${cell_number%this.board_size}`)\r\n        }\r\n\r\n        this.play_area[cell_number] = new_state;\r\n    }\r\n\r\n    set_cell_xy(row: number, col:number, new_state: Cell) {\r\n        let cell_number = row * this.board_size + col;\r\n        this.set_cell(cell_number, new_state, false);\r\n    }\r\n\r\n    get_neighborhood(row:number, col:number): GetNeighborhoodResult {\r\n        let alive_player_1_count = 0\r\n        let alive_player_2_count = 0\r\n\r\n        for (let row_delta = -1; row_delta < 2; row_delta ++) {\r\n            let c_row = row + row_delta\r\n            if (c_row < 0 || c_row >= this.board_size) {\r\n                continue\r\n            }\r\n\r\n            for (let col_delta = -1; col_delta < 2; col_delta ++) {\r\n                if (row_delta == 0 && col_delta == 0) {\r\n                    continue\r\n                }                \r\n\r\n                let c_col = col + col_delta\r\n                if (c_col < 0 || c_col >= this.board_size) {\r\n                    continue\r\n                }\r\n\r\n                switch(this.play_area[c_row * this.board_size + c_col]) {\r\n                    case Cell.Dead: /* do nothing */ ; break;\r\n                    case Cell.AlivePlayer0: alive_player_1_count++; break;\r\n                    case Cell.AlivePlayer1: alive_player_2_count++; break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return new GetNeighborhoodResult(alive_player_1_count, alive_player_2_count);\r\n    }\r\n\r\n}","import { CellDelta, BirthRules } from './game'\r\n\r\nexport class Replay {\r\n    replay_steps: ReplayStep[] = [];\r\n    constructor(\r\n        public max_first_player_placements: number,\r\n        public max_second_player_placements: number,\r\n        public has_placement_limit: boolean,\r\n        public max_round_placements: number,\r\n        public board_size: number,\r\n        public birth_rules: BirthRules\r\n    ) {}\r\n}\r\n\r\nexport enum ReplayStepType {\r\n    Placement,\r\n    Run,\r\n    End\r\n}\r\n\r\nexport class ReplayStep {\r\n    constructor(public replay_step_type: ReplayStepType, public board_delta: CellDelta[], public current_player: number,\r\n                public left_to_place: number[], public score: number[], public left_to_place_this_round: number[]) \r\n                {\r\n\r\n                }\r\n}","\r\nimport { Cell, Board } from './board'\r\n\r\nimport { Replay, ReplayStepType, ReplayStep } from './replay'\r\n\r\nexport enum CellDelta {\r\n    NoChange,\r\n    Die,\r\n    SpawnPlayer0,\r\n    SpawnPlayer1\r\n}\r\n\r\nexport enum GameState {\r\n    InActive,\r\n    Place,\r\n    Run,\r\n    End,\r\n    Replay\r\n}\r\n\r\nexport enum BirthRules {\r\n    Normal,\r\n    ThreePlusOne,\r\n    Both,\r\n    P2Life\r\n}\r\n\r\ninterface SavedGameState {\r\n    board: Cell[];\r\n    score: number[];\r\n}\r\n\r\nexport class Game {\r\n    board: Board;\r\n    old_states: Array<SavedGameState>;\r\n\r\n    current_player = 0;\r\n    left_to_place = [0,0];\r\n    score = [0,0];\r\n\r\n    game_state: GameState = GameState.InActive;\r\n    \r\n    prev_player_placed: boolean = true;\r\n    current_player_placed: boolean = false;\r\n    has_placement_limit = false;\r\n    left_to_place_this_round = [0,0];\r\n\r\n    max_first_player_placements = 20;\r\n    max_second_player_placements = 21;\r\n    max_round_placements = 0;\r\n    board_size: number = 10;\r\n    birth_rules: BirthRules = BirthRules.Normal;\r\n\r\n\r\n    undo_list: [number, number][];\r\n    replay: Replay;\r\n\r\n    get_cell_delta: (x: number, y: number) => CellDelta = this.get_cell_delta_normal;\r\n\r\n    constructor() {\r\n        this.board = new Board(this.board_size);\r\n        this.init_game();\r\n    }\r\n\r\n    set_config(max_first_player_placements: number, max_second_player_placements: number, max_round_placements: number, board_size: number, birth_rules: BirthRules) {\r\n        this.max_first_player_placements = max_first_player_placements;\r\n        this.max_second_player_placements = max_second_player_placements;\r\n        this.max_round_placements = max_round_placements;\r\n        this.has_placement_limit = this.max_round_placements > 0;\r\n        this.board_size = board_size;\r\n        this.board = new Board(board_size);\r\n        this.birth_rules = birth_rules;\r\n\r\n        if (birth_rules == BirthRules.Normal) {\r\n            this.get_cell_delta = this.get_cell_delta_normal\r\n        }\r\n        else if (birth_rules == BirthRules.ThreePlusOne) {\r\n            this.get_cell_delta = this.get_cell_delta_threeplusone\r\n        }\r\n        else if (birth_rules == BirthRules.Both) {\r\n            this.get_cell_delta = this.get_cell_delta_both\r\n        }\r\n        else if (birth_rules == BirthRules.P2Life) {\r\n            this.get_cell_delta = this.get_cell_delta_p2life\r\n        }\r\n    }\r\n\r\n    init_game() {\r\n        // Reset play area and history\r\n        this.board.reset_play_area();\r\n        this.old_states = [];\r\n        this.left_to_place = [this.max_first_player_placements, this.max_first_player_placements];\r\n        this.score = [0,0];\r\n        // Choose startring player at random\r\n        this.current_player = Math.random() > 0.5 ? 0 : 1;\r\n        // Other player gets another placement\r\n        this.left_to_place[1 - this.current_player] = this.max_second_player_placements;\r\n\r\n        this.replay = new Replay(this.max_first_player_placements, this.max_second_player_placements, this.has_placement_limit,\r\n                                 this.max_round_placements, this.board_size, this.birth_rules);\r\n\r\n        this.go_to_placement();\r\n    }\r\n\r\n    get_board_size(): number {\r\n        return this.board_size;\r\n    }\r\n\r\n    get_current_player() : number {\r\n        return this.current_player\r\n    }\r\n\r\n    get_placements_left() : Array<number> {\r\n        return this.left_to_place;\r\n    }\r\n\r\n    get_game_state() {\r\n        return this.game_state\r\n    }\r\n\r\n    get_placements_left_for_current_player() {\r\n        let placements_left = this.left_to_place[this.current_player];\r\n        if (this.has_placement_limit && this.left_to_place_this_round[this.current_player] < this.left_to_place[this.current_player]) {\r\n            placements_left = this.left_to_place_this_round[this.current_player];\r\n        }\r\n        return placements_left;\r\n    }\r\n\r\n    game_step() {\r\n        let board_delta = this.get_board_delta();\r\n        let old_state = <Cell[]>Object.assign([], this.board.play_area);\r\n        let old_score = <number[]>Object.assign([], this.score);\r\n        this.old_states.push({board: old_state, score: old_score});\r\n\r\n        board_delta.forEach((new_state, idx) => {\r\n            switch (new_state) {\r\n                case CellDelta.NoChange: break;\r\n                case CellDelta.Die: this.board.set_cell(idx, Cell.Dead, false); break;\r\n                case CellDelta.SpawnPlayer0: this.board.set_cell(idx, Cell.AlivePlayer0, true); break;\r\n                case CellDelta.SpawnPlayer1: this.board.set_cell(idx, Cell.AlivePlayer1, true); break;\r\n            }\r\n        })\r\n\r\n        this.calculate_score();\r\n\r\n        this.replay.replay_steps.push(new ReplayStep(ReplayStepType.Run, board_delta, this.current_player,\r\n                                      [...this.left_to_place], [...this.score], [...this.left_to_place_this_round]));\r\n\r\n        console.log(`Comparing states`)\r\n\r\n        // If board is empty and one player can't place, end game\r\n        if ((this.left_to_place[0] == 0 && this.score[0] == 0) || (this.left_to_place[1] == 0 && this.score[1] == 0))\r\n        {\r\n            this.go_to_end_game();\r\n        }\r\n\r\n        // Pause game if board has only one color or is in a loop\r\n        if (this.score[0] == 0 || this.score[1] == 0 || this.check_for_repeating_game_state()) {\r\n            console.log(`Match found`)\r\n            this.go_to_placement();\r\n            if (this.left_to_place[0] > this.left_to_place[1]) {\r\n                this.current_player = 0\r\n            }\r\n            else if (this.left_to_place[1] > this.left_to_place[0]) {\r\n                this.current_player = 1\r\n            }\r\n            else {\r\n                this.current_player = 1 - this.current_player\r\n            }\r\n        }       \r\n\r\n        return board_delta;\r\n    }\r\n\r\n    compare_states(state1: SavedGameState, state2: SavedGameState) : boolean {\r\n        if (state1.score[0] != state2.score[0] || state1.score[1] != state2.score[1]) {\r\n            return false;\r\n        }\r\n        \r\n        for (let i = 0; i < this.board_size * this.board_size; i++) {\r\n            if (state1.board[i] != state2.board[i]) { \r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    check_for_repeating_game_state() {\r\n        const current_game_state = { board: this.board.play_area, score: this.score }\r\n        return this.old_states.some(old_state => this.compare_states(current_game_state, old_state))\r\n    }\r\n\r\n    get_cell_delta_normal(row:number, col:number): CellDelta {\r\n        let neighborhood = this.board.get_neighborhood(row, col);\r\n        let current_cell_alive = this.board.get_cell_xy(row, col) != Cell.Dead\r\n\r\n        switch (neighborhood.total) {\r\n            case 2: return CellDelta.NoChange;\r\n            case 3: return current_cell_alive ? \r\n                        CellDelta.NoChange : \r\n                        neighborhood.alive_player_1_count > neighborhood.alive_player_2_count ?\r\n                        CellDelta.SpawnPlayer0 : CellDelta.SpawnPlayer1\r\n\r\n            default:  return current_cell_alive ? CellDelta.Die : CellDelta.NoChange;\r\n        }\r\n    }\r\n\r\n    get_cell_delta_threeplusone(row:number, col:number): CellDelta {\r\n        let neighborhood = this.board.get_neighborhood(row, col);\r\n        let current_cell_alive = this.board.get_cell_xy(row, col) != Cell.Dead\r\n\r\n        switch (neighborhood.total) {\r\n            case 2: return CellDelta.NoChange;\r\n            case 3: return CellDelta.NoChange;\r\n            case 4: return current_cell_alive || neighborhood.alive_player_1_count == 0 || neighborhood.alive_player_2_count == 0 ? \r\n                        CellDelta.NoChange : \r\n                        neighborhood.alive_player_1_count > neighborhood.alive_player_2_count ? CellDelta.SpawnPlayer0 : \r\n                        neighborhood.alive_player_1_count < neighborhood.alive_player_2_count ? CellDelta.SpawnPlayer1 :\r\n                        CellDelta.NoChange\r\n\r\n            default:  return current_cell_alive ? CellDelta.Die : CellDelta.NoChange;\r\n        }\r\n    }\r\n\r\n    get_cell_delta_both(row:number, col:number): CellDelta {\r\n        let neighborhood = this.board.get_neighborhood(row, col);\r\n        let current_cell_alive = this.board.get_cell_xy(row, col) != Cell.Dead\r\n\r\n        switch (neighborhood.total) {\r\n            case 2: return CellDelta.NoChange;\r\n            case 3: return current_cell_alive ? \r\n                        CellDelta.NoChange : \r\n                        neighborhood.alive_player_1_count > neighborhood.alive_player_2_count ?\r\n                        CellDelta.SpawnPlayer0 : CellDelta.SpawnPlayer1\r\n            case 4: return current_cell_alive || neighborhood.alive_player_1_count == 0 || neighborhood.alive_player_2_count == 0 ? \r\n                        CellDelta.NoChange : \r\n                        neighborhood.alive_player_1_count > neighborhood.alive_player_2_count ? CellDelta.SpawnPlayer0 : \r\n                        neighborhood.alive_player_1_count < neighborhood.alive_player_2_count ? CellDelta.SpawnPlayer1 :\r\n                        CellDelta.NoChange\r\n\r\n            default:  return current_cell_alive ? CellDelta.Die : CellDelta.NoChange;\r\n        }\r\n    }\r\n\r\n    get_cell_delta_p2life(row:number, col:number) {\r\n        let neighborhood = this.board.get_neighborhood(row, col);\r\n        let current_cell =  this.board.get_cell_xy(row, col);\r\n        let current_cell_alive = current_cell != Cell.Dead\r\n\r\n        if (current_cell_alive) {\r\n            const diff = Math.abs(neighborhood.alive_player_1_count - neighborhood.alive_player_2_count);\r\n            if (diff == 2 || diff == 3) {\r\n                return CellDelta.NoChange;\r\n            }\r\n            else if (diff == 1) {\r\n                if (\r\n                    (current_cell == Cell.AlivePlayer0 && neighborhood.alive_player_1_count >= 2) || \r\n                    (current_cell == Cell.AlivePlayer1 && neighborhood.alive_player_2_count >= 2)\r\n                ) {\r\n                    return CellDelta.NoChange;\r\n                }\r\n                else {\r\n                    return CellDelta.Die;\r\n                }\r\n            }\r\n            else {\r\n                return CellDelta.Die;\r\n            }\r\n        }\r\n        // Spawn rules\r\n        else {\r\n            if (neighborhood.alive_player_1_count == 3 && neighborhood.alive_player_2_count != 3) {\r\n                return CellDelta.SpawnPlayer0;\r\n            }\r\n            else if (neighborhood.alive_player_2_count == 3 && neighborhood.alive_player_1_count != 3) {\r\n                return CellDelta.SpawnPlayer1;\r\n            }\r\n            else if (neighborhood.alive_player_1_count == 3 && neighborhood.alive_player_2_count == 3) {\r\n                const rand = Math.random();\r\n                return rand <= 0.5 ? CellDelta.SpawnPlayer0 : CellDelta.SpawnPlayer1;\r\n            }\r\n            else {\r\n                return CellDelta.NoChange;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    get_board_delta() : CellDelta[] {\r\n        let play_area_delta = new Array<CellDelta>();\r\n        for (let c_row = 0; c_row < this.board_size; c_row++) {\r\n            for (let c_col = 0; c_col < this.board_size; c_col++) {\r\n                play_area_delta.push(this.get_cell_delta(c_row, c_col))            \r\n            }\r\n        }\r\n\r\n        return play_area_delta;\r\n    }\r\n\r\n    go_to_placement() {\r\n        console.log(`State = placement`);\r\n\r\n        if (this.left_to_place[0] == 0 && this.left_to_place[1] == 0) {\r\n            this.go_to_end_game();\r\n        }\r\n        else {\r\n            this.game_state = GameState.Place;\r\n            this.prev_player_placed = true;\r\n            this.current_player_placed = false;\r\n            this.undo_list = new Array<[number, number]>();\r\n            if (this.has_placement_limit) {\r\n                this.left_to_place_this_round = [this.max_round_placements, this.max_round_placements]\r\n            } \r\n        }\r\n    }\r\n\r\n    go_to_run() {\r\n        console.log(`State = run`);\r\n        this.game_state = GameState.Run;\r\n    }\r\n\r\n    go_to_end_game() {\r\n        console.log(`State = end`);\r\n        this.game_state = GameState.End;\r\n        this.replay.replay_steps.push(new ReplayStep(ReplayStepType.End, null, this.current_player,\r\n            [...this.left_to_place], [...this.score], [...this.left_to_place_this_round]));\r\n    }\r\n\r\n    go_to_replay() {\r\n        console.log(`State = replay`);\r\n        this.game_state = GameState.Replay;\r\n    }\r\n\r\n    can_place_at_xy(row:number, col:number): boolean {\r\n        return this.game_state == GameState.Place && \r\n               this.board.get_cell_xy(row, col) == Cell.Dead && \r\n               this.left_to_place[this.current_player] > 0 && \r\n               (!this.has_placement_limit || this.left_to_place_this_round[this.current_player] > 0);\r\n    }\r\n\r\n    can_undo_at_xy(row: number, col: number): boolean {\r\n        return this.undo_list.some(([r, c]) => r == row && c == col);\r\n    }\r\n\r\n    place_at_xy(row:number, col:number) {        \r\n        this.left_to_place[this.current_player] -= 1;\r\n        if (this.has_placement_limit) {\r\n            this.left_to_place_this_round[this.current_player] -= 1;\r\n        }\r\n        this.current_player_placed = true;\r\n        this.board.set_cell_xy(row, col, this.current_player == 0 ? Cell.AlivePlayer0 : Cell.AlivePlayer1)\r\n        this.undo_list.push([row, col]);\r\n    }\r\n\r\n    undo_at_xy(row: number, col: number) {\r\n        this.left_to_place[this.current_player] += 1;\r\n        if (this.has_placement_limit) {\r\n            this.left_to_place_this_round[this.current_player] += 1;\r\n        }\r\n\r\n        this.board.set_cell_xy(row, col, Cell.Dead);\r\n        this.undo_list = this.undo_list.filter(([r, c]) => r !== row || c !== col)\r\n    }\r\n    \r\n    convert_undolist_to_board_delta(): CellDelta[] {\r\n        const delta = [];\r\n\r\n        for (let i = 0; i < this.board_size * this.board_size; i++) {\r\n            delta.push(CellDelta.NoChange);\r\n        }\r\n\r\n        this.undo_list.forEach(([row, col]) => {\r\n            delta[row*this.board_size + col] = this.current_player == 0 ? CellDelta.SpawnPlayer0 : CellDelta.SpawnPlayer1;\r\n        });\r\n\r\n        return delta;\r\n    }\r\n\r\n    pass_player() {\r\n\r\n        this.replay.replay_steps.push(new ReplayStep(ReplayStepType.Placement, this.convert_undolist_to_board_delta(), this.current_player,\r\n        [...this.left_to_place], [...this.score], [...this.left_to_place_this_round]));\r\n\r\n        this.undo_list = new Array<[number, number]>();\r\n\r\n        if (!this.current_player_placed && !this.prev_player_placed) {\r\n            this.calculate_score();\r\n            \r\n            if (this.score[0] == 0 || this.score[1] == 0) {\r\n                this.go_to_end_game();\r\n            }\r\n            else {\r\n                this.go_to_run();\r\n            }\r\n        }\r\n        else {\r\n            this.prev_player_placed = this.current_player_placed;\r\n            this.current_player = 1-this.current_player;\r\n            this.current_player_placed = false;\r\n    \r\n            if (this.left_to_place[this.current_player] == 0 || (this.has_placement_limit && this.left_to_place_this_round[this.current_player] == 0)) {\r\n                this.go_to_run();\r\n            }\r\n        }\r\n    }\r\n\r\n    calculate_score(): Array<number> {\r\n        let score = [0, 0];\r\n        for (let i = 0; i < this.board_size * this.board_size; i++) {\r\n            if (this.board.play_area[i] == Cell.AlivePlayer0) {\r\n                score[0]++\r\n            }\r\n            else if (this.board.play_area[i] == Cell.AlivePlayer1) {\r\n                score[1]++\r\n            }\r\n        }\r\n\r\n        this.score = score;\r\n\r\n        return score;\r\n    }\r\n}","import { Game, GameState, CellDelta, BirthRules } from './game'\r\nimport { Replay, ReplayStep, ReplayStepType } from './replay'\r\n\r\nexport class UI {\r\n\r\n    game: Game;\r\n    board_size: number;\r\n    \r\n    constructor(game: Game) {\r\n        this.game = game\r\n        this.draw_replay_box();\r\n    }\r\n\r\n    new_game() {\r\n        this.game.init_game();\r\n\r\n        this.board_size = this.game.get_board_size();\r\n\r\n        this.set_current_player_title(this.game.get_current_player());\r\n        this.set_current_placements_left(this.game.get_placements_left(), this.game.has_placement_limit, this.game.left_to_place_this_round);\r\n        this.set_current_score(this.game.calculate_score());\r\n\r\n        this.create_board();\r\n        this.setup_buttons();\r\n    }\r\n\r\n    create_board() {\r\n        const board = document.getElementById(\"playboard\")\r\n        board.innerHTML = '';\r\n\r\n        for (let row = 0; row < this.board_size; row++) {\r\n            const dom_row = document.createElement(\"div\");\r\n            dom_row.style.display = \"flex\";\r\n            dom_row.style.flexDirection = \"row\";\r\n            for (let col = 0; col < this.board_size; col++) {\r\n                const dom_col = document.createElement(\"div\");\r\n                dom_col.classList.add(\"board_cell\");\r\n                \r\n                dom_col.classList.add(`_${this.board_size}X${this.board_size}`);\r\n\r\n                dom_col.id = `${row}-${col}`;\r\n                dom_col.onclick = () => this.cell_clicked(row, col)\r\n                dom_row.appendChild(dom_col)\r\n            }\r\n            board.appendChild(dom_row);\r\n        }\r\n    }\r\n\r\n    setup_buttons() {\r\n        const pass_btn = document.getElementById(\"pass_player_button\");\r\n        pass_btn.onclick = () => this.pass_player();\r\n        pass_btn.style.display = 'block';\r\n        pass_btn.removeAttribute(\"disabled\");\r\n\r\n        const new_game_btn = document.getElementById(\"new_game_button\");\r\n        new_game_btn.onclick = () => this.new_game();\r\n        new_game_btn.style.display = 'none';\r\n\r\n        const win_div = document.getElementById(\"winner\");\r\n        win_div.innerHTML = '';\r\n        win_div.classList.remove('player_0');\r\n        win_div.classList.remove('player_1');\r\n        win_div.parentElement.style.display = \"none\";\r\n\r\n        const instructions_toggle = document.getElementById(\"instructions_toggle\");\r\n        instructions_toggle.onclick = () => {\r\n            const instructions = document.getElementById('instructions');\r\n            if (instructions.style.display == \"none\") {\r\n                instructions.style.display = \"block\"\r\n            }\r\n            else {\r\n                instructions.style.display = \"none\"\r\n            }\r\n        }\r\n\r\n        const configuration_toggle = document.getElementById(\"configuration_toggle\");\r\n        configuration_toggle.onclick = () => {\r\n            const configuration = document.getElementById('configuration');\r\n            if (configuration.style.display == \"none\") {\r\n                configuration.style.display = \"block\"\r\n            }\r\n            else {\r\n                configuration.style.display = \"none\"\r\n            }\r\n        }\r\n\r\n        const save_config = document.getElementById(\"save_config\");\r\n        save_config.onclick = () => this.save_config()\r\n\r\n        const random_place_div = document.getElementById('random_place_div');\r\n        random_place_div.style.display = \"block\";\r\n\r\n        const random_place_button = document.getElementById(\"random_place_button\");\r\n        random_place_button.removeAttribute(\"disabled\");\r\n        random_place_button.onclick = () => this.random_placement();\r\n\r\n\r\n        const replay_toggle = document.getElementById(\"replay_toggle\");\r\n        replay_toggle.onclick = () => {\r\n            const configuration = document.getElementById('replay');\r\n            if (configuration.style.display == \"none\") {\r\n                configuration.style.display = \"block\";\r\n            }\r\n            else {\r\n                configuration.style.display = \"none\";\r\n            }\r\n        };\r\n\r\n        const run_replay = document.getElementById(\"run_replay\");\r\n        run_replay.onclick = () => this.load_and_run_replay();\r\n\r\n        const save_replay = document.getElementById(\"save_replay_button\");\r\n        save_replay.onclick = () => this.save_replay();\r\n    }\r\n\r\n    select_birth_rules(birth_rules_str: string) {\r\n        switch (birth_rules_str) {\r\n            case \"normal\" : return BirthRules.Normal;\r\n            case \"three_plus_one\" : return BirthRules.ThreePlusOne;\r\n            case \"both\" : return BirthRules.Both;\r\n            case \"p2life\" : return BirthRules.P2Life;\r\n            default: return BirthRules.Normal;\r\n        }\r\n    }\r\n\r\n    save_config() {\r\n        const max_first_player_placements =  (<HTMLInputElement>document.getElementById(\"max_first_player_placements\")).value;\r\n        const max_second_player_placements =  (<HTMLInputElement>document.getElementById(\"max_second_player_placements\")).value;\r\n        const max_round_placements =  (<HTMLInputElement>document.getElementById(\"max_round_placements\")).value;\r\n        const board_size = (<HTMLSelectElement>document.getElementById(\"board_size\")).value;\r\n\r\n        const birth_rules = (<HTMLSelectElement>document.getElementById(\"birth_rules\")).value;\r\n        \r\n        this.game.set_config(parseInt(max_first_player_placements), parseInt(max_second_player_placements), parseInt(max_round_placements), parseInt(board_size), this.select_birth_rules(birth_rules));\r\n        this.new_game();\r\n    }\r\n\r\n    cell_clicked(row: number, col: number) {\r\n        console.log(`Clicked ${row} : ${col}`);\r\n\r\n        if (this.game.can_place_at_xy(row, col)) {\r\n            this.game.place_at_xy(row, col);\r\n            const current_player = this.game.get_current_player();\r\n            this.change_color_at_xy(row, col, `selected_player_${current_player}`);\r\n            this.set_current_placements_left(this.game.get_placements_left(), this.game.has_placement_limit, this.game.left_to_place_this_round);\r\n            this.set_current_score(this.game.calculate_score());\r\n            document.getElementById(\"pass_player_button\").classList.add(\"green_animate\");\r\n        }\r\n        else if (this.game.can_undo_at_xy(row, col)) {\r\n            this.game.undo_at_xy(row, col);\r\n            this.change_color_at_xy(row, col, '');\r\n            this.set_current_placements_left(this.game.get_placements_left(), this.game.has_placement_limit, this.game.left_to_place_this_round);\r\n            this.set_current_score(this.game.calculate_score());\r\n        }\r\n    }\r\n\r\n    change_color_at_xy(row: number, col: number, css_class: string) {\r\n        const cell = document.getElementById(`${row}-${col}`);\r\n        cell.classList.remove(\"active_player_0\");\r\n        cell.classList.remove(\"active_player_1\");\r\n        cell.classList.remove(\"selected_player_0\");\r\n        cell.classList.remove(\"selected_player_1\");\r\n        \r\n        if (css_class) {\r\n            cell.classList.add(css_class);      \r\n        }\r\n    }\r\n\r\n    fix_selections() {\r\n        const current_player = this.game.get_current_player();\r\n        const placement_list = this.game.undo_list;\r\n\r\n        placement_list.forEach(([row, col]) => {\r\n            this.change_color_at_xy(row, col, `active_player_${current_player}`);\r\n        });        \r\n    }\r\n\r\n    change_colors_many(diff: CellDelta[], pattern: string = `active_player`) {\r\n        for (let row = 0; row < this.board_size; row++) {\r\n            for (let col = 0; col < this.board_size; col++) {\r\n                const delta = diff[row*this.board_size + col];\r\n                if (delta == CellDelta.NoChange) {\r\n                    continue;\r\n                }\r\n\r\n                this.change_color_at_xy(row, col, delta == CellDelta.Die ? null : delta == CellDelta.SpawnPlayer0 ? `${pattern}_0` : `${pattern}_1`)\r\n            }\r\n        }\r\n    }\r\n\r\n    async pass_player() {\r\n        document.getElementById(\"pass_player_button\").classList.remove(\"green_animate\");\r\n\r\n        this.fix_selections();\r\n        this.game.pass_player();\r\n        this.set_current_player_title(this.game.get_current_player());\r\n\r\n        if (this.game.get_game_state() == GameState.Run) {\r\n            document.getElementById(\"pass_player_button\").setAttribute(\"disabled\", \"disabled\");\r\n            document.getElementById(\"random_place_button\").setAttribute(\"disabled\", \"disabled\");\r\n            this.run_game();\r\n        }\r\n        else if (this.game.get_game_state() == GameState.End) {\r\n            this.end_game();\r\n        }\r\n    }\r\n\r\n    sleep(ms: number) {\r\n         return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    async run_game() {\r\n        while (this.game.get_game_state() == GameState.Run) {\r\n            console.log(`Running game loop`)\r\n            const board_delta = this.game.game_step();\r\n            this.change_colors_many(board_delta);\r\n            this.set_current_score(this.game.calculate_score());\r\n            await this.sleep(500)\r\n        }\r\n\r\n        console.log(`Ending game loop`)\r\n\r\n        if (this.game.get_game_state() == GameState.Place) {\r\n            document.getElementById(\"pass_player_button\").removeAttribute(\"disabled\");\r\n            document.getElementById(\"random_place_button\").removeAttribute(\"disabled\");\r\n            this.set_current_player_title(this.game.get_current_player());\r\n            this.set_current_placements_left(this.game.get_placements_left(), this.game.has_placement_limit, this.game.left_to_place_this_round);\r\n        }\r\n        else if (this.game.get_game_state() == GameState.End) {\r\n            this.end_game();\r\n        }\r\n    }    \r\n\r\n    end_game() {\r\n        document.getElementById(\"pass_player_button\").style.display = \"none\";\r\n        document.getElementById(\"random_place_div\").style.display = \"none\";\r\n        document.getElementById(\"new_game_button\").style.display = \"block\";\r\n        document.getElementById(\"save_replay_button\").style.display = \"block\";\r\n\r\n        const score = this.game.score;\r\n        const placements_left = this.game.get_placements_left()\r\n\r\n        this.set_winner(score);\r\n    }\r\n\r\n    set_current_player_title(current_player: number) {\r\n        const current_player_title = document.getElementById(`current_player`);\r\n        current_player_title.innerHTML = current_player == 0 ? 'Red' : 'Blue'\r\n        current_player_title.classList.remove('player_0')\r\n        current_player_title.classList.remove('player_1')\r\n        current_player_title.classList.add(`player_${current_player}`)\r\n    }\r\n\r\n    set_current_placements_left(placements_left: number[], has_placement_limit: boolean, left_to_place_this_round: number[] ) {\r\n        document.getElementById(`player_0_placements`).innerHTML = placements_left[0].toString();\r\n        document.getElementById(`player_1_placements`).innerHTML = placements_left[1].toString();\r\n\r\n        if (has_placement_limit) {\r\n            document.getElementById(`player_0_placements`).innerHTML += ` (${left_to_place_this_round[0].toString()})`;\r\n            document.getElementById(`player_1_placements`).innerHTML += ` (${left_to_place_this_round[1].toString()})`;\r\n        }\r\n\r\n    }\r\n\r\n    set_current_score(score: number[]) {        \r\n        document.getElementById(`player_0_score`).innerHTML = score[0].toString();\r\n        document.getElementById(`player_1_score`).innerHTML = score[1].toString();\r\n    }\r\n\r\n    set_winner(score: number[]) {\r\n        const win_div = document.getElementById(\"winner\");\r\n        if (score[0] > score[1]) {\r\n            win_div.innerHTML = \"Red Wins!\";\r\n            win_div.classList.add(\"player_0\");\r\n        } \r\n        else if (score[1] > score[0]) {\r\n            win_div.innerHTML = \"Blue Wins!\";\r\n            win_div.classList.add(\"player_1\");\r\n        }\r\n        else {\r\n            win_div.innerHTML = \"Tie!\";\r\n        }\r\n\r\n        win_div.parentElement.style.display = \"block\";\r\n    }\r\n\r\n    random_placement() {\r\n        let number_to_place =  parseInt((<HTMLInputElement>document.getElementById(\"random_place_input\")).value);\r\n        const max_can_place = this.game.get_placements_left_for_current_player();\r\n\r\n        if (number_to_place > max_can_place) {\r\n            number_to_place = max_can_place;\r\n        }\r\n\r\n        while (number_to_place > 0) {\r\n            const x = Math.floor(Math.random() * 1000) % this.board_size;\r\n            const y = Math.floor(Math.random() * 1000) % this.board_size;\r\n\r\n            if (this.game.can_place_at_xy(x, y)) {\r\n                this.cell_clicked(x, y);\r\n                number_to_place--;\r\n            }\r\n        }\r\n    }\r\n\r\n    async load_and_run_replay() {\r\n        const selected_replay = (<HTMLSelectElement> document.getElementById('replays_avaliable')).value;\r\n        const replay_str = localStorage.getItem(selected_replay);\r\n        if (replay_str) {\r\n            await this.run_replay(JSON.parse(replay_str));\r\n        }\r\n    }\r\n\r\n    fix_placement_to_active() {\r\n        for (let player = 0; player < 2; player ++) {\r\n            const elements = document.getElementsByClassName(`selected_player_${player}`);\r\n\r\n            while (elements.length) {\r\n                elements[0].classList.add(`active_player_${player}`)\r\n                elements[0].classList.remove(`selected_player_${player}`);\r\n            }\r\n        }        \r\n    }\r\n\r\n    async run_replay(replay: Replay) {\r\n        this.game.set_config(replay.max_first_player_placements, replay.max_second_player_placements, replay.max_round_placements,\r\n            replay.board_size, replay.birth_rules);\r\n        \r\n        this.game.init_game();\r\n        this.game.go_to_replay();\r\n\r\n        this.board_size = this.game.get_board_size();\r\n\r\n        this.set_current_score(this.game.calculate_score());\r\n\r\n        this.create_board();\r\n\r\n        document.getElementById(\"pass_player_button\").style.display = \"none\";\r\n        document.getElementById(\"random_place_div\").style.display = \"none\";\r\n\r\n        const win_div = document.getElementById(\"winner\");\r\n        win_div.innerHTML = '';\r\n        win_div.classList.remove('player_0');\r\n        win_div.classList.remove('player_1');\r\n        win_div.parentElement.style.display = \"none\";\r\n\r\n        for (let index in replay.replay_steps) {\r\n            const replay_step:ReplayStep = replay.replay_steps[index];\r\n\r\n            if (replay_step.replay_step_type !== ReplayStepType.End) {\r\n                console.log(`Running replay`)\r\n                this.set_current_placements_left(replay_step.left_to_place, replay.has_placement_limit, replay_step.left_to_place_this_round);\r\n                this.set_current_player_title(replay_step.current_player);\r\n                const board_delta = replay_step.board_delta;\r\n                if (replay_step.replay_step_type == ReplayStepType.Run) {\r\n                    this.change_colors_many(board_delta);\r\n                    this.set_current_score(replay_step.score);\r\n                    await this.sleep(500)\r\n                }\r\n                else if (replay_step.replay_step_type == ReplayStepType.Placement) {\r\n                    // Show selection color\r\n                    this.change_colors_many(board_delta, `selected_player`);\r\n                    this.set_current_score(replay_step.score);\r\n                    await this.sleep(300)\r\n                    // Fix selection colors to normal\r\n                    this.fix_placement_to_active();\r\n                    await this.sleep(250)\r\n                }\r\n               \r\n            }\r\n            else {\r\n                this.set_winner(replay_step.score);\r\n            }\r\n        }\r\n\r\n        document.getElementById(\"new_game_button\").style.display = \"block\";\r\n    }\r\n\r\n    get_max_replay_number() {\r\n        let last_replay_number = 0;\r\n        let last_replay_str = localStorage.getItem('last_replay_number');\r\n\r\n        if (last_replay_str) {\r\n            last_replay_number = parseInt(last_replay_str);\r\n        }\r\n\r\n        return last_replay_number;\r\n    }\r\n\r\n    save_replay() {\r\n        const next_replay_number = this.get_max_replay_number() + 1;\r\n        localStorage.setItem('last_replay_number', next_replay_number.toString());\r\n        localStorage.setItem(`replay_${next_replay_number}`, JSON.stringify(this.game.replay));\r\n\r\n        document.getElementById(\"save_replay_button\").style.display = \"none\";\r\n        \r\n        this.draw_replay_box();\r\n    }\r\n\r\n    draw_replay_box() {\r\n        const max_replay_number = this.get_max_replay_number();\r\n\r\n\r\n        const select_box = <HTMLSelectElement>document.getElementById('replays_avaliable');\r\n\r\n        while (select_box.options.length > 0) { select_box.options.remove(0); }\r\n\r\n        for (let i = 1; i <= max_replay_number; i++) {\r\n            const replay_json = localStorage.getItem(`replay_${i}`);\r\n            if (replay_json) {\r\n                const replay = <Replay>JSON.parse(replay_json);\r\n                const score = replay.replay_steps.find(step => step.replay_step_type == ReplayStepType.End).score;\r\n                const new_replay_option = new Option(`#${i}, Red: ${score[0]}, Blue: ${score[1]}`, `replay_${i}`);               \r\n                select_box.add(new_replay_option);\r\n            }\r\n        }\r\n    }\r\n}","import { Board } from \"./board\"\r\nimport { Game } from \"./game\";\r\nimport { UI } from \"./ui\";\r\n\r\nconst game = new Game();\r\nconst ui = new UI(game);\r\n\r\nui.new_game();"],"names":[],"mappings":"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"}